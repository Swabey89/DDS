#ifndef __OV7670__
#define __OV7670__

#include <stdint.h>
//#include "FastPWM.h"
#include "mbed.h"
#include "main.h"

extern Serial pc;
extern FILE* fp;
extern char directory[30];
extern int imigIndex;
//Test for camera trigger
extern DigitalIn trig;
extern DigitalOut testled;
/*
static char encoding_table[] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
                                'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
                                'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
                                'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
                                'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
                                'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
                                'w', 'x', 'y', 'z', '0', '1', '2', '3',
                                '4', '5', '6', '7', '8', '9', '+', '/'};
*/
//static int mod_table[] = {0, 2, 1};

struct regval_list{
    uint8_t reg_num;
    uint8_t value;
};


//OV2640 regs

//JPEG_INIT
const struct regval_list OV2640_JPEG_INIT[] = {

  { 0xff, 0x00 },
	
  { 0x2c, 0xff },

  { 0x2e, 0xdf },

  { 0xff, 0x01 },
	
  { 0x3c, 0x32 },
	
	//0x11 - clock divider. Works down to 0x02, 
  { 0x11, 0x02 },

  { 0x09, 0x02 },

  { 0x04, 0x28 },

  //test to turn off banding filter selection
	// { 0x13, 0xc7 },
	
	{ 0x13, 0xe5 }, //turn on exposure control
	
	//{ 0x13, 0xe4 }, //turn off exposure control

  //Sets gain ceiling. was 0x50.
	{ 0x14, 0x50 },
	

  { 0x2c, 0x0c },

  { 0x33, 0x78 },

  { 0x3a, 0x33 },

  { 0x3b, 0xfB },

  //{ 0x3e, 0x00 },

  { 0x43, 0x11 },

  { 0x16, 0x10 },

  { 0x39, 0x92 },

  { 0x35, 0xda },

  { 0x22, 0x1a },

  { 0x37, 0xc3 },

  { 0x23, 0x00 },

  { 0x34, 0xc0 },

  { 0x36, 0x1a },

  { 0x06, 0x88 },

  { 0x07, 0xc0 },

  { 0x0d, 0x87 },

  { 0x0e, 0x41 },

  { 0x4c, 0x00 },

  { 0x48, 0x00 },

  { 0x5B, 0x00 },

  { 0x42, 0x03 },

  { 0x4a, 0x81 },

  { 0x21, 0x99 },

  { 0x24, 0x40 },

  { 0x25, 0x38 },

  { 0x26, 0x82 },

  { 0x5c, 0x00 },

  { 0x63, 0x00 },

  { 0x61, 0x70 },

  { 0x62, 0x80 },

  { 0x7c, 0x05 },

  { 0x20, 0x80 },

  { 0x28, 0x30 },

  { 0x6c, 0x00 },

  { 0x6d, 0x80 },

  { 0x6e, 0x00 },

  { 0x70, 0x02 },

  { 0x71, 0x94 },

  { 0x73, 0xc1 },

  { 0x12, 0x40 },

  { 0x17, 0x11 },

  { 0x18, 0x43 },

  { 0x19, 0x00 },

  { 0x1a, 0x4b },

  { 0x32, 0x09 },

  { 0x37, 0xc0 },

  { 0x4f, 0x60 },

  { 0x50, 0xa8 },

  { 0x6d, 0x00 },

  { 0x3d, 0x38 },

  { 0x46, 0x3f },

  { 0x4f, 0x60 },

  { 0x0c, 0x3c },

  { 0xff, 0x00 },

  //{ 0xe5, 0x7f }, //reserved

  { 0xf9, 0xc0 },

  { 0x41, 0x24 },

  { 0xe0, 0x14 },

  { 0x76, 0xff },

  { 0x33, 0xa0 },

  { 0x42, 0x20 },

  { 0x43, 0x18 },

  { 0x4c, 0x00 },

  { 0x87, 0xd5 },

  { 0x88, 0x3f },

  { 0xd7, 0x03 },

  { 0xd9, 0x10 },

  { 0xd3, 0x82 },

  { 0xc8, 0x08 },

  //{ 0xc9, 0x80 },  //Reserved
	
	/* Unsure

  { 0x7c, 0x00 }, 

  { 0x7d, 0x00 },

  { 0x7c, 0x03 },

  { 0x7d, 0x48 },

  { 0x7d, 0x48 },

  { 0x7c, 0x08 },

  { 0x7d, 0x20 },

  { 0x7d, 0x10 },

  { 0x7d, 0x0e },
	
	*/

  /* reserved
	{ 0x90, 0x00 },

  { 0x91, 0x0e },

  { 0x91, 0x1a },

  { 0x91, 0x31 },

  { 0x91, 0x5a },

  { 0x91, 0x69 },

  { 0x91, 0x75 },

  { 0x91, 0x7e },

  { 0x91, 0x88 },

  { 0x91, 0x8f },

  { 0x91, 0x96 },

  { 0x91, 0xa3 },

  { 0x91, 0xaf },

  { 0x91, 0xc4 },

  { 0x91, 0xd7 },

  { 0x91, 0xe8 },

  { 0x91, 0x20 },

  { 0x92, 0x00 },

  { 0x93, 0x06 },

  { 0x93, 0xe3 },

  { 0x93, 0x05 },

  { 0x93, 0x05 },

  { 0x93, 0x00 },

  { 0x93, 0x04 },

  { 0x93, 0x00 },

  { 0x93, 0x00 },

  { 0x93, 0x00 },

  { 0x93, 0x00 },

  { 0x93, 0x00 },

  { 0x93, 0x00 },

  { 0x93, 0x00 },

  { 0x96, 0x00 },

  { 0x97, 0x08 },

  { 0x97, 0x19 },

  { 0x97, 0x02 },

  { 0x97, 0x0c },

  { 0x97, 0x24 },

  { 0x97, 0x30 },

  { 0x97, 0x28 },

  { 0x97, 0x26 },

  { 0x97, 0x02 },

  { 0x97, 0x98 },

  { 0x97, 0x80 },

  { 0x97, 0x00 },

  { 0x97, 0x00 },
	
	*/

  { 0xc3, 0xed },

  { 0xa4, 0x00 },

  { 0xa8, 0x00 },

  { 0xc5, 0x11 },

  { 0xc6, 0x51 },

  { 0xbf, 0x80 },

  { 0xc7, 0x10 },

  { 0xb6, 0x66 },

  { 0xb8, 0xA5 },

  { 0xb7, 0x64 },

  { 0xb9, 0x7C },

  { 0xb3, 0xaf },

  { 0xb4, 0x97 },

  { 0xb5, 0xFF },

  { 0xb0, 0xC5 },

  { 0xb1, 0x94 },

  { 0xb2, 0x0f },

  { 0xc4, 0x5c },

  { 0xc0, 0x64 },

  { 0xc1, 0x4B },

  { 0x8c, 0x00 },

  { 0x86, 0x3D },

  { 0x50, 0x00 },

  { 0x51, 0xC8 },

  { 0x52, 0x96 },

  { 0x53, 0x00 },

  { 0x54, 0x00 },

  { 0x55, 0x00 },

  { 0x5a, 0xC8 },

  { 0x5b, 0x96 },

  { 0x5c, 0x00 },

  { 0xd3, 0x7f },	//{ 0xd3, 0x7f },

  { 0xc3, 0xed },

  { 0x7f, 0x00 },

  { 0xda, 0x00 },

  { 0xe5, 0x1f },

  { 0xe1, 0x67 },

  { 0xe0, 0x00 },

  { 0xdd, 0x7f },

  { 0x05, 0x00 },               

  //{ 0x12, 0x40 },

  { 0xd3, 0x7f },	//{ 0xd3, 0x7f },

  { 0xc0, 0x16 },

  { 0xC1, 0x12 },

  { 0x8c, 0x00 },

  { 0x86, 0x3d },

  { 0x50, 0x00 },

  { 0x51, 0x2C },

  { 0x52, 0x24 },

  { 0x53, 0x00 },

  { 0x54, 0x00 },

  { 0x55, 0x00 },

  { 0x5A, 0x2c },

  { 0x5b, 0x24 },

  { 0x5c, 0x00 },

  { 0xff, 0xff },
	
};


//OV2640_YUV422
const struct regval_list OV2640_YUV422[] = {

  { 0xFF, 0x00 },
	
	{ 0x44, 0x0C }, //Quantisation testing

  { 0x05, 0x00 },

  { 0xDA, 0x10 },

  { 0xD7, 0x03 },

  { 0xDF, 0x00 },

  { 0x33, 0x80 },

  { 0x3C, 0x40 },

  { 0xe1, 0x77 },

  { 0x00, 0x00 },

  { 0xff, 0xff },

};

//OV2640_JPEG
const struct regval_list OV2640_JPEG[] = {

  { 0xe0, 0x14 },

  { 0xe1, 0x77 },

  { 0xe5, 0x1f },

  { 0xd7, 0x03 },

  { 0xda, 0x10 },

  { 0xe0, 0x00 },

  { 0xFF, 0x01 },

  { 0x04, 0x08 },

  { 0xff, 0xff },

}; 

//OV2640_320x240_JPEG
const struct regval_list OV2640_320x240_JPEG[] = {

  { 0xff, 0x01 },
	
	{ 0x10, 0x33 }, //Setting manual exposure. Seem to need to do this due to slow pclk
	
  { 0x12, 0x40 },

  { 0x17, 0x11 },

  { 0x18, 0x43 },

  { 0x19, 0x00 },

  { 0x1a, 0x4b },

  { 0x32, 0x09 },

  { 0x4f, 0xca },

  { 0x50, 0xa8 },

  { 0x5a, 0x23 },

  { 0x6d, 0x00 },

  { 0x39, 0x12 },

  { 0x35, 0xda },

  { 0x22, 0x1a },

  { 0x37, 0xc3 },

  { 0x23, 0x00 },

  { 0x34, 0xc0 },

  { 0x36, 0x1a },

  { 0x06, 0x88 },

  { 0x07, 0xc0 },

  { 0x0d, 0x87 },

  { 0x0e, 0x41 },

  { 0x4c, 0x00 },

  { 0xff, 0x00 },

  { 0xe0, 0x04 },

  { 0xc0, 0x64 },

  { 0xc1, 0x4b },

  { 0x86, 0x35 },

  { 0x50, 0x89 },

  { 0x51, 0xc8 },

  { 0x52, 0x96 },

  { 0x53, 0x00 },

  { 0x54, 0x00 },

  { 0x55, 0x00 },

  { 0x57, 0x00 },

  { 0x5a, 0x50 },

  { 0x5b, 0x3c },

  { 0x5c, 0x00 },

  { 0xe0, 0x00 },

  { 0xff, 0xff },

};
/*
const struct regval_list OV2640_352x288_JPEG[] =  



{

  { 0xff, 0x01 },
	
	{ 0x10, 0x33 }, //Setting manual exposure. Seem to need to do this due to slow pclk

  { 0x12, 0x40 },

  { 0x17, 0x11 },

  { 0x18, 0x43 },

  { 0x19, 0x00 },

  { 0x1a, 0x4b },

  { 0x32, 0x09 },

  { 0x4f, 0xca },

  { 0x50, 0xa8 },

  { 0x5a, 0x23 },

  { 0x6d, 0x00 },

  { 0x39, 0x12 },

  { 0x35, 0xda },

  { 0x22, 0x1a },

  { 0x37, 0xc3 },

  { 0x23, 0x00 },

  { 0x34, 0xc0 },

  { 0x36, 0x1a },

  { 0x06, 0x88 },

  { 0x07, 0xc0 },

  { 0x0d, 0x87 },

  { 0x0e, 0x41 },

  { 0x4c, 0x00 },

  { 0xff, 0x00 },

  { 0xe0, 0x04 },

  { 0xc0, 0x64 },

  { 0xc1, 0x4b },

  { 0x86, 0x35 },

  { 0x50, 0x89 },

  { 0x51, 0xc8 },

  { 0x52, 0x96 },

  { 0x53, 0x00 },

  { 0x54, 0x00 },

  { 0x55, 0x00 },

  { 0x57, 0x00 },

  { 0x5a, 0x58 },

  { 0x5b, 0x48 },

  { 0x5c, 0x00 },

  { 0xe0, 0x00 },  

  { 0xff, 0xff },

};
*/



const struct regval_list OV2640_640x480_JPEG[] =  
{
	{0xff, 0x01},
	
	//Manual exposure registers
	{0x45, 0x3F}, //MSBits
	{0x10, 0xFF}, //set manual exposure value. Was 0x33
	{0x04, 0x03}, //LSBits
	//{0x10, 0x05}, //putting the exposure right down while i increase the speed
	
	//{0x11, 0x01},
	{0x12, 0x00}, // Bit[6:4]: Resolution selection//0x02???
	{0x17, 0x11}, // HREFST[10:3]
	{0x18, 0x75}, // HREFEND[10:3]
	{0x32, 0x36}, // Bit[5:3]: HREFEND[2:0]; Bit[2:0]: HREFST[2:0]
	{0x19, 0x01}, // VSTRT[9:2]
	{0x1a, 0x97}, // VEND[9:2]
	{0x03, 0x0f}, // Bit[3:2]: VEND[1:0]; Bit[1:0]: VSTRT[1:0]
	{0x37, 0x40},
	{0x4f, 0xbb},
	{0x50, 0x9c},
	{0x5a, 0x57},
	{0x6d, 0x80},
	{0x3d, 0x34},
	{0x39, 0x02},
	{0x35, 0x88},
	{0x22, 0x0a},
	{0x37, 0x40},
	{0x34, 0xa0},
	{0x06, 0x02},
	{0x0d, 0xb7},
	{0x0e, 0x01},
	
	{0xff, 0x00}, 		      
	{0xe0, 0x04},       
	{0xc0, 0xc8},       
	{0xc1, 0x96},       
	{0x86, 0x3d},       
	{0x50, 0x89},       
	{0x51, 0x90},       
	{0x52, 0x2c},       
	{0x53, 0x00},       
	{0x54, 0x00},       
	{0x55, 0x88},       
	{0x57, 0x00},       
	{0x5a, 0xa0},       
	{0x5b, 0x78},       
	{0x5c, 0x00},       
	//{0xd3, 0x04},       
	{0xe0, 0x00},       
                      
  	{0xff, 0xff},
};     

  

/* JPG 800x600 */
/*
const struct regval_list OV2640_800x600_JPEG[] =  
{
	{0xff, 0x01},
	{ 0x10, 0x33 },
	//{0x11, 0x01},
	//altering these one at a time to try and get a good file
	{0x12, 0x00}, // Bit[6:4]: Resolution selection//
	{0x17, 0x11}, // HREFST[10:3]
	{0x18, 0x75}, // HREFEND[10:3]
	{0x32, 0x36}, // Bit[5:3]: HREFEND[2:0]; Bit[2:0]: HREFST[2:0] // was 0x36
	{0x19, 0x01}, // VSTRT[9:2]
	{0x1a, 0x97}, // VEND[9:2]
	{0x03, 0x0f}, // Bit[3:2]: VEND[1:0]; Bit[1:0]: VSTRT[1:0]
	{0x37, 0x40},
	{0x4f, 0xbb},
	{0x50, 0x9c},
	{0x5a, 0x57},
	{0x6d, 0x80},
	{0x3d, 0x34},
	{0x39, 0x02},
	{0x35, 0x88},
	{0x22, 0x0a},
	{0x37, 0x40},
	{0x34, 0xa0},
	{0x06, 0x02},
	{0x0d, 0xb7},
	{0x0e, 0x01},
	
	{0xff, 0x00},
	{0xe0, 0x04},
	{0xc0, 0xc8},
	{0xc1, 0x96},
	{0x86, 0x35},
	{0x50, 0x89},
	{0x51, 0x90},
	{0x52, 0x2c},
	{0x53, 0x00},
	{0x54, 0x00},
	{0x55, 0x88},
	{0x57, 0x00},
	{0x5a, 0xc8},
	{0x5b, 0x96},
	{0x5c, 0x00},
	//{0xd3, 0x02},
	{0xe0, 0x00},
                      
  	{0xff, 0xff},
};     

*/
       

/* JPG 1024x768 */
/*
const struct regval_list OV2640_1024x768_JPEG[] =  

{

	{0xff, 0x01},
	
	{ 0x10, 0x33 }, //Setting manual exposure. Seem to need to do this due to slow pclk

	{0x11, 0x01},

	{0x12, 0x00}, // Bit[6:4]: Resolution selection//0x02???

	{0x17, 0x11}, // HREFST[10:3]

	{0x18, 0x75}, // HREFEND[10:3]

	{0x32, 0x36}, // Bit[5:3]: HREFEND[2:0]; Bit[2:0]: HREFST[2:0]

	{0x19, 0x01}, // VSTRT[9:2]

	{0x1a, 0x97}, // VEND[9:2]

	{0x03, 0x0f}, // Bit[3:2]: VEND[1:0]; Bit[1:0]: VSTRT[1:0]

	{0x37, 0x40},

	{0x4f, 0xbb},

	{0x50, 0x9c},

	{0x5a, 0x57},

	{0x6d, 0x80},

	{0x3d, 0x34},

	{0x39, 0x02},

	{0x35, 0x88},

	{0x22, 0x0a},

	{0x37, 0x40},

	{0x34, 0xa0},

	{0x06, 0x02},

	{0x0d, 0xb7},

	{0x0e, 0x01},

	

	{0xff, 0x00},		  

	{0xc0, 0xC8},          

	{0xc1, 0x96},          

	{0x8c, 0x00},          

	{0x86, 0x3D},          

	{0x50, 0x00},          

	{0x51, 0x90},          

	{0x52, 0x2C},          

	{0x53, 0x00},          

	{0x54, 0x00},          

	{0x55, 0x88},          

	{0x5a, 0x00},          

	{0x5b, 0xC0},          

	{0x5c, 0x01},          

	{0xd3, 0x02},          



                      

  {0xff, 0xff},

};  

*/

   /* JPG 1280x1024 */
/*
const struct regval_list OV2640_1280x1024_JPEG[] =  

{

	{0xff, 0x01},
	
	{ 0x10, 0x33 }, //Setting manual exposure. Seem to need to do this due to slow pclk

	{0x11, 0x01},

	{0x12, 0x00}, // Bit[6:4]: Resolution selection//0x02???

	{0x17, 0x11}, // HREFST[10:3]

	{0x18, 0x75}, // HREFEND[10:3]

	{0x32, 0x36}, // Bit[5:3]: HREFEND[2:0]; Bit[2:0]: HREFST[2:0]

	{0x19, 0x01}, // VSTRT[9:2]

	{0x1a, 0x97}, // VEND[9:2]

	{0x03, 0x0f}, // Bit[3:2]: VEND[1:0]; Bit[1:0]: VSTRT[1:0]

	{0x37, 0x40},

	{0x4f, 0xbb},

	{0x50, 0x9c},

	{0x5a, 0x57},

	{0x6d, 0x80},

	{0x3d, 0x34},

	{0x39, 0x02},

	{0x35, 0x88},

	{0x22, 0x0a},

	{0x37, 0x40},

	{0x34, 0xa0},

	{0x06, 0x02},

	{0x0d, 0xb7},

	{0x0e, 0x01},

	

	{0xff, 0x00},     		      

	{0xe0, 0x04},           

	{0xc0, 0xc8},           

	{0xc1, 0x96},           

	{0x86, 0x3d},           

	{0x50, 0x00},           

	{0x51, 0x90},           

	{0x52, 0x2c},           

	{0x53, 0x00},           

	{0x54, 0x00},           

	{0x55, 0x88},           

	{0x57, 0x00},           

	{0x5a, 0x40},           

	{0x5b, 0xf0},           

	{0x5c, 0x01},           

	{0xd3, 0x02},           

	{0xe0, 0x00},           

                      

  	{0xff, 0xff},

};         
*/
       

   /* JPG 1600x1200 */

/*
const struct regval_list OV2640_1600x1200_JPEG[] =  

{

	{0xff, 0x01},
	
	{ 0x10, 0x33 }, //Setting manual exposure. Seem to need to do this due to slow pclk

	{0x11, 0x01},

	{0x12, 0x00}, // Bit[6:4]: Resolution selection//0x02???

	{0x17, 0x11}, // HREFST[10:3]

	{0x18, 0x75}, // HREFEND[10:3]

	{0x32, 0x36}, // Bit[5:3]: HREFEND[2:0]; Bit[2:0]: HREFST[2:0]

	{0x19, 0x01}, // VSTRT[9:2]

	{0x1a, 0x97}, // VEND[9:2]

	{0x03, 0x0f}, // Bit[3:2]: VEND[1:0]; Bit[1:0]: VSTRT[1:0]

	{0x37, 0x40},

	{0x4f, 0xbb},

	{0x50, 0x9c},

	{0x5a, 0x57},

	{0x6d, 0x80},

	{0x3d, 0x34},

	{0x39, 0x02},

	{0x35, 0x88},

	{0x22, 0x0a},

	{0x37, 0x40},

	{0x34, 0xa0},

	{0x06, 0x02},

	{0x0d, 0xb7},

	{0x0e, 0x01},

	

	{0xff, 0x00},        	                              

	{0xe0, 0x04},                                   

	{0xc0, 0xc8},                                   

	{0xc1, 0x96},                                   

	{0x86, 0x3d},                                   

	{0x50, 0x00},                                   

	{0x51, 0x90},                                   

	{0x52, 0x2c},                                   

	{0x53, 0x00},                                   

	{0x54, 0x00},                                   

	{0x55, 0x88},                                   

	{0x57, 0x00},                                   

	{0x5a, 0x90},                                   

	{0x5b, 0x2C},                                   

	{0x5c, 0x05},              //bit2->1;bit[1:0]->1

	{0xd3, 0x02},                                   

	{0xe0, 0x00},                                   

  {0xff, 0xff},   	

}; 
*/

//</> OV2640 regs









///* Registers */
//#define REG_GAIN    0x00    /* Gain lower 8 bits (rest in vref) */
//#define REG_BLUE    0x01    /* blue gain */
//#define REG_RED     0x02    /* red gain */
//#define REG_VREF    0x03    /* Pieces of GAIN, VSTART, VSTOP */
//#define REG_COM1    0x04    /* Control 1 */
//#define COM1_CCIR656    0x40    /* CCIR656 enable */

//#define REG_BAVE    0x05    /* U/B Average level */
//#define REG_GbAVE   0x06    /* Y/Gb Average level */
//#define REG_AECHH   0x07    /* AEC MS 5 bits */
//#define REG_RAVE    0x08    /* V/R Average level */
//#define REG_COM2    0x09    /* Control 2 */
//#define COM2_SSLEEP 0x10    /* Soft sleep mode */
//#define REG_PID     0x0a    /* Product ID MSB */
//#define REG_VER     0x0b    /* Product ID LSB */
//#define REG_COM3    0x0c    /* Control 3 */
//#define COM3_SWAP   0x40    /* Byte swap */
//#define COM3_SCALEEN    0x08    /* Enable scaling */
//#define COM3_DCWEN  0x04    /* Enable downsamp/crop/window */
//#define REG_COM4    0x0d    /* Control 4 */
//#define REG_COM5    0x0e    /* All "reserved" */
//#define REG_COM6    0x0f    /* Control 6 */
//#define REG_AECH    0x10    /* More bits of AEC value */
//#define REG_CLKRC   0x11    /* Clocl control */
//#define CLK_EXT     0x40    /* Use external clock directly */
//#define CLK_SCALE   0x3f    /* Mask for internal clock scale */
//#define REG_COM7    0x12    /* Control 7 */
//#define COM7_RESET  0x80    /* Register reset */
//#define COM7_FMT_MASK   0x38
//#define COM7_FMT_VGA    0x00
//#define COM7_FMT_CIF    0x20    /* CIF format */
//#define COM7_FMT_QVGA   0x10    /* QVGA format */
//#define COM7_FMT_QCIF   0x08    /* QCIF format */
//#define COM7_RGB    0x04    /* bits 0 and 2 - RGB format */
//#define COM7_YUV    0x00    /* YUV */
//#define COM7_BAYER  0x01    /* Bayer format */
//#define COM7_PBAYER 0x05    /* "Processed bayer" */
//#define REG_COM8    0x13    /* Control 8 */
//#define COM8_FASTAEC    0x80    /* Enable fast AGC/AEC */
//#define COM8_AECSTEP    0x40    /* Unlimited AEC step size */
//#define COM8_BFILT  0x20    /* Band filter enable */
//#define COM8_AGC    0x04    /* Auto gain enable */
//#define COM8_AWB    0x02    /* White balance enable */
//#define COM8_AEC    0x01    /* Auto exposure enable */
//#define REG_COM9    0x14    /* Control 9- gain ceiling */ //was 0x14
//#define REG_COM10   0x15    /* Control 10 */
//#define COM10_HSYNC 0x40    /* HSYNC instead of HREF */
//#define COM10_PCLK_HB   0x20    /* Suppress PCLK on horiz blank */
//#define COM10_HREF_REV  0x08    /* Reverse HREF */
//#define COM10_VS_LEAD   0x04    /* VSYNC on clock leading edge */
//#define COM10_VS_NEG    0x02    /* VSYNC negative */
//#define COM10_HS_NEG    0x01    /* HSYNC negative */
//#define REG_HSTART  0x17    /* Horiz start high bits */
//#define REG_HSTOP   0x18    /* Horiz stop high bits */
//#define REG_VSTART  0x19    /* Vert start high bits */
//#define REG_VSTOP   0x1a    /* Vert stop high bits */
//#define REG_PSHFT   0x1b    /* Pixel delay after HREF */
//#define REG_MIDH    0x1c    /* Manuf. ID high */
//#define REG_MIDL    0x1d    /* Manuf. ID low */
//#define REG_MVFP    0x1e    /* Mirror / vflip */
//#define MVFP_MIRROR 0x20    /* Mirror image */
//#define MVFP_FLIP   0x10    /* Vertical flip */

//#define REG_AEW     0x24    /* AGC upper limit */ //was 24 defaults work well
//#define REG_AEB     0x25    /* AGC lower limit */ //was 25 defaults work well
//#define REG_VPT     0xD4    /* AGC/AEC fast mode op region */ //was 26
//#define REG_HSYST   0x30    /* HSYNC rising edge delay */
//#define REG_HSYEN   0x31    /* HSYNC falling edge delay */
//#define REG_HREF    0x32    /* HREF pieces */
//#define REG_TSLB    0x3a    /* lots of stuff */
//#define TSLB_YLAST  0x04    /* UYVY or VYUY - see com13 */
//#define REG_COM11   0x3b    /* Control 11 */
//#define COM11_NIGHT 0x80    /* NIght mode enable */
//#define COM11_NMFR  0x60    /* Two bit NM frame rate */
//#define COM11_HZAUTO    0x10    /* Auto detect 50/60 Hz */
//#define COM11_50HZ  0x08    /* Manual 50Hz select */
//#define COM11_EXP   0x02
//#define REG_COM12   0x3c    /* Control 12 */
//#define COM12_HREF  0x80    /* HREF always */
//#define REG_COM13   0x3d    /* Control 13 */
//#define COM13_GAMMA 0x80    /* Gamma enable */
//#define COM13_UVSAT 0x40    /* UV saturation auto adjustment */ //was 0x40
//#define COM13_UVSWAP    0x01    /* V before U - w/TSLB */
//#define REG_COM14   0x3e    /* Control 14 */
//#define COM14_DCWEN 0x10    /* DCW/PCLK-scale enable */
//#define REG_EDGE    0x3f    /* Edge enhancement factor */ //was 3f
//#define REG_COM15   0x40    /* Control 15 */
//#define COM15_R10F0 0x00    /* Data range 10 to F0 */
//#define COM15_R01FE 0x80    /*          01 to FE */
//#define COM15_R00FF 0xc0    /*          00 to FF */
//#define COM15_RGB565    0x10    /* RGB565 output */
//#define COM15_RGB555    0x30    /* RGB555 output */
//#define REG_COM16   0x41    /* Control 16 */
//#define COM16_AWBGAIN   0x08    /* AWB gain enable */
//#define REG_COM17   0x42    /* Control 17 */
//#define COM17_AECWIN    0xc0    /* AEC window - must match COM4 */
//#define COM17_CBAR  0x08    /* DSP Color bar */
///*
// * This matrix defines how the colors are generated, must be
// * tweaked to adjust hue and saturation.
// *
// * Order: v-red, v-green, v-blue, u-red, u-green, u-blue
// * They are nine-bit signed quantities, with the sign bit
// * stored in0x58.Sign for v-red is bit 0, and up from there.
// */
//#define REG_CMATRIX_BASE0x4f
//#define CMATRIX_LEN 6
//#define REG_CMATRIX_SIGN0x58
//#define REG_BRIGHT  0x55    /* Brightness */
//#define REG_CONTRAS 0x56    /* Contrast control */
//#define REG_GFIX    0x69    /* Fix gain control */
//#define REG_REG76   0x76    /* OV's name */
//#define R76_BLKPCOR 0x80    /* Black pixel correction enable */
//#define R76_WHTPCOR 0x40    /* White pixel correction enable */
//#define REG_RGB444  0x8c    /* RGB 444 control */
//#define R444_ENABLE 0x02    /* Turn on RGB444, overrides 5x5 */
//#define R444_RGBX   0x01    /* Empty nibble at end */
//#define REG_HAECC1  0x9f    /* Hist AEC/AGC control 1 */
//#define REG_HAECC2  0xa0    /* Hist AEC/AGC control 2 */
//#define REG_BD50MAX 0xa5    /* 50hz banding step limit */
//#define REG_HAECC3  0xa6    /* Hist AEC/AGC control 3 */
//#define REG_HAECC4  0xa7    /* Hist AEC/AGC control 4 */
//#define REG_HAECC5  0xa8    /* Hist AEC/AGC control 5 */
//#define REG_HAECC6  0xa9    /* Hist AEC/AGC control 6 */
//#define REG_HAECC7  0xaa    /* Hist AEC/AGC control 7 */
//#define REG_BD60MAX 0xab    /* 60hz banding step limit */
//#define COM7_FMT_CIF    0x20    /* CIF format */
//#define COM7_RGB    0x04    /* bits 0 and 2 - RGB format */
//#define COM7_YUV    0x00    /* YUV */
//#define COM7_BAYER  0x01    /* Bayer format */
//#define COM7_PBAYER 0x05    /* "Processed bayer" */
//#define COM10_VS_LEAD   0x04    /* VSYNC on clock leading edge */
//#define COM11_50HZ  0x08    /* Manual 50Hz select */
//#define COM13_UVSAT 0x40    /* UV saturation auto adjustment */
//#define COM15_R01FE 0x80    /*          01 to FE */
//#define MTX1        0x4f    /* Matrix Coefficient 1 */
//#define MTX2        0x50    /* Matrix Coefficient 2 */
//#define MTX3        0x51    /* Matrix Coefficient 3 */
//#define MTX4        0x52    /* Matrix Coefficient 4 */
//#define MTX5        0x53    /* Matrix Coefficient 5 */
//#define MTX6        0x54    /* Matrix Coefficient 6 */
//#define MTXS        0x58    /* Matrix Coefficient Sign */
//#define AWBC7       0x59    /* AWB Control 7 */
//#define AWBC8       0x5a    /* AWB Control 8 */
//#define AWBC9       0x5b    /* AWB Control 9 */
//#define AWBC10      0x5c    /* AWB Control 10 */
//#define AWBC11      0x5d    /* AWB Control 11 */
//#define AWBC12      0x5e    /* AWB Control 12 */
//#define REG_GFI     0x69    /* Fix gain control */
//#define GGAIN       0x6a    /* G Channel AWB Gain */
//#define DBLV        0x6b    
//#define AWBCTR3     0x6c    /* AWB Control 3 */
//#define AWBCTR2     0x6d    /* AWB Control 2 */
//#define AWBCTR1     0x6e    /* AWB Control 1 */
//#define AWBCTR0     0x6f    /* AWB Control 0 */




//#define OV7670_I2C_ADDRESS  0x21 //not sure if this is right
//#define camAddr_WR 0x42
#define OV7670_I2C_ADDRESS 0x90
#define camAddr_WR 0x60 //OV2640 address
#define camAddr_RD 0x61

//enum RESOLUTION{VGA,QVGA,QQVGA};
//enum COLORSPACE{YUV422,RGB565,BAYER_RGB};



//void wrColourTable(void);

class OV7670
{
	public:
		OV7670(PinName sda, PinName scl, PinName vsync, PinName pclk, PinName href, PinName pwdn, PinName rst, PortName port, uint16_t mask);
		~OV7670(void);
		void camInit(void);
		void captureImg(uint16_t wg, uint16_t hg);
		//bool storeImg(const char* uniqueIdentifier, int photoIndex);
		bool storeImg();
		void standby(void);
		void wakeup(void);
		char rdReg(uint8_t reg);
	
	private:
		I2C _i2c;
		DigitalIn _vsync;
		DigitalIn _pclk;
		DigitalIn _href;
		DigitalOut _pwdn;
		DigitalOut _rst;
		PortIn _data;
		uint8_t _pixels[19200];
		//Test to see if large array is causing me to run out of memory. Constructor is not called
		//int8_t _pixels[28826];
		void setRes(void);
		void setColour(void);
		void wrReg(uint8_t reg, uint8_t dat);
		int base64_encode(const unsigned char *data,
                    size_t input_length,
                    char* encoded_data);
		void wrSensorRegs8_8(const struct regval_list[]);
};






//const char bmpheader320_240[54] = {0x42,0x4D,0x36,0x30,0x01,0x00,0x00,0x00,0x00,0x00,0x36,0x04,0x00,0x00,0x28,0x00,0x00,0x00,
//0x40,0x01,0x00,0x00,0xF0,0x00,0x00,0x00,0x01,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x2C,0x01,0x00,0x13,0x0B,
//0x00,0x00,0x13,0x0B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

//number of colours in the pallete was 256, so 00 01 00 00

//const struct regval_list qvga_ov7670[]  = {
//  { REG_COM14, 0x19 }, //**ORIGINAL
//  { 0x72, 0x11 },
//  { 0x73, 0xf1 }, //**ORIGINAL

//  { REG_HSTART, 0x16 },
//  { REG_HSTOP, 0x04 },
//  { REG_HREF, 0xa4 },
//  { REG_VSTART, 0x02 },
//  { REG_VSTOP, 0x7a },
//  { REG_VREF, 0x0a },


///*
//  { REG_HSTART, 0x16 },
//  { REG_HSTOP, 0x04 },
//  { REG_HREF, 0x24 },
//  { REG_VSTART, 0x02 },
//  { REG_VSTOP, 0x7a },
//  { REG_VREF, 0x0a },*/
//  { 0xff, 0xff }, /* END MARKER */
//};

//const struct regval_list yuv422_ov7670[]  = {
//  { REG_COM7, 0x10 },  /* Selects YUV mode */
//  { REG_RGB444, 0 },  /* No RGB444 please */
//  { REG_COM1, 0 },
//  { REG_COM15, COM15_R00FF },
//  { REG_COM9, 0x00 }, /* 128x gain ceiling; 0x8 is reserved bit */ //was 0x6A
//  { 0x4f, 0x80 },   /* "matrix coefficient 1" */
//  { 0x50, 0x80 },   /* "matrix coefficient 2" */
//  { 0x51, 0 },    /* vb */
//  { 0x52, 0x22 },   /* "matrix coefficient 4" */
//  { 0x53, 0x5e },   /* "matrix coefficient 5" */
//  { 0x54, 0x80 },   /* "matrix coefficient 6" */
//  { REG_COM13, 0xD9 }, //was UVSAT //Try swap Y
//	{REG_BRIGHT, 0x98}, //TEST
//	{REG_CONTRAS, 0x50}, //TEST
//  { 0xff, 0xff },   /* END MARKER */
//};

//const struct regval_list ov7670_default_regs[] = {//from the linux driver
//  { REG_COM7, COM7_RESET },
//  { REG_TSLB, 0x04 }, /* OV */
//  { REG_COM7, 0x0 },  /* VGA */
//  /*
//  * Set the hardware window.  These values from OV don't entirely
//  * make sense - hstop is less than hstart.  But they work...
//  */
//  { REG_HSTART, 0x13 }, { REG_HSTOP, 0x01 },
//  { REG_HREF, 0xb6 }, { REG_VSTART, 0x02 },
//  { REG_VSTOP, 0x7a }, { REG_VREF, 0x0a },

//  { REG_COM3, 0 }, { REG_COM14, 0 },
//  /* Mystery scaling numbers */
//  { 0x70, 0x3a }, { 0x71, 0x35 },
//  { 0x72, 0x11 }, { 0x73, 0xf0 },
//  { 0xa2,/* was 1*/0x02 }, { REG_COM10, 0x0 },
//  /* Gamma curve values */
//	
//	/*
//  { 0x7a, 0x20 }, { 0x7b, 0x10 },
//  { 0x7c, 0x1e }, { 0x7d, 0x35 },
//  { 0x7e, 0x5a }, { 0x7f, 0x69 },
//  { 0x80, 0x76 }, { 0x81, 0x80 },
//  { 0x82, 0x88 }, { 0x83, 0x8f },
//  { 0x84, 0x96 }, { 0x85, 0xa3 },
//  { 0x86, 0xaf }, { 0x87, 0xc4 },
//  { 0x88, 0xd7 }, { 0x89, 0xe8 },
//	*/
//	
//	
//	{ 0x7a, 0x18 }, { 0x7b, 0x02 },
//  { 0x7c, 0x07 }, { 0x7d, 0x1F },
//  { 0x7e, 0x49 }, { 0x7f, 0x5A },
//  { 0x80, 0x6A }, { 0x81, 0x79 },
//  { 0x82, 0x87 }, { 0x83, 0x94 },
//  { 0x84, 0x9F }, { 0x85, 0xAF },
//  { 0x86, 0xBB }, { 0x87, 0xCF },
//  { 0x88, 0xEE }, { 0x89, 0xEE },
//	
//	
//	  /* AGC and AEC parameters.  Note we start by disabling those features,
//  then turn them only after tweaking the values. */
//  { REG_COM8, COM8_FASTAEC | COM8_AECSTEP },
//  { REG_GAIN, 0 }, { REG_AECH, 0x40 }, //AECH was 0
//  { REG_COM4, 0x40 }, /* magic reserved bit */
//  { REG_COM9, 0x18 }, /* 4x gain + magic rsvd bit */ //TEST was 0x4A
//  { REG_BD50MAX, 0x05 }, { REG_BD60MAX, 0x07 },
//  { REG_AEW, 0x95 }, { REG_AEB, 0x33 },
//  { REG_VPT, 0xe3 }, { REG_HAECC1, 0x78 },
//  { REG_HAECC2, 0x68 }, { 0xa1, 0x03 }, /* magic */
//  { REG_HAECC3, 0xd8 }, { REG_HAECC4, 0xd8 },
//  { REG_HAECC5, 0xf0 }, { REG_HAECC6, 0x90 },
//  { REG_HAECC7, 0x94 },
//  //{ REG_COM8, COM8_FASTAEC | COM8_AECSTEP | COM8_AGC | COM8_AWB | COM8_AEC },
//  { 0x30, 0 }, { 0x31, 0 },//disable some delays
//  /* Almost all of these are magic "reserved" values.  */
//  { REG_COM5, 0x61 }, { REG_COM6, 0xA3 }, //was EB. turn on HREF on optical black
//  { 0x16, 0x02 }, { REG_MVFP, 0x24 }, //was 0x07
//  { 0x21, 0x02 }, { 0x22, 0x91 },
//  { 0x29, 0x07 }, { 0x33, 0x0b },
//  { 0x35, 0x0b }, { 0x37, 0x1d },
//  { 0x38, 0x71 }, { 0x39, 0x2a },
//  { REG_COM12, 0x78 }, { 0x4d, 0x40 },
//  { 0x4e, 0x20 }, { REG_GFIX, 0 },
//  {0x6b, 0x7A},{ 0x74, 0x10 }, //**reg 0x6b. PLL mult by 4 
//  { 0x8d, 0x4f }, { 0x8e, 0 },
//  { 0x8f, 0 }, { 0x90, 0 },
//  { 0x91, 0 }, { 0x96, 0 },
//  { 0x9a, 0 }, { 0xb0, 0x84 },
//  { 0xb1, 0x0c }, { 0xb2, 0x0e },
//  { 0xb3, 0x82 }, { 0xb8, 0x0a },

//  /* More reserved magic, some of which tweaks white balance */
//  { 0x43, 0x0a }, { 0x44, 0xf0 },
//  { 0x45, 0x34 }, { 0x46, 0x58 },
//  { 0x47, 0x28 }, { 0x48, 0x3a },
//  { 0x59, 0x88 }, { 0x5a, 0x88 },
//  { 0x5b, 0x44 }, { 0x5c, 0x67 },
//  { 0x5d, 0x49 }, { 0x5e, 0x0e },
//  { 0x6c, 0x0a }, { 0x6d, 0x55 },
//  { 0x6e, 0x11 }, { 0x6f, 0x9E }, /* it was 0x9F "9e for advance AWB" */
//  { 0x6a, 0x40 }, { REG_BLUE, 0x40 },
//  { REG_RED, 0x60 },
//  //{ REG_COM8, COM8_FASTAEC | COM8_AECSTEP | COM8_AGC | COM8_AEC | COM8_AWB },
//	{ REG_COM8, 0xe7 }, //from the software app note
//  /* Matrix coefficients */
//  { 0x4f, 0x80 }, { 0x50, 0x80 },
//  { 0x51, 0 },    { 0x52, 0x22 },
//  { 0x53, 0x5e }, { 0x54, 0x80 },
//  { 0x58, 0x9e }, //was 9e

//  { REG_COM16, 0x38/*COM16_AWBGAIN*/ }, { REG_EDGE, 0x0 },
//  { 0x75, 0x05 }, { REG_REG76, 0xe1 },
//  { 0x4c, 0 },     { 0x77, 0x01 },
//  { REG_COM13, 0x99}, { 0x4b, 0x09 },
//  { 0xc9, 0x60 },   /*{REG_COM16, 0x38},*/
//  { 0x56, 0x40 },

//  { 0x34, 0x11 }, { REG_COM11, COM11_EXP | COM11_HZAUTO },
//  { 0xa4, 0x82/*Was 0x88*/ }, { 0x96, 0 },
//  { 0x97, 0x30 }, { 0x98, 0x20 },
//  { 0x99, 0x30 }, { 0x9a, 0x84 },
//  { 0x9b, 0x29 }, { 0x9c, 0x03 },
//  { 0x9d, 0x4c }, { 0x9e, 0x3f },
//  { 0x78, 0x04 },

//  /* Extra-weird stuff.  Some sort of multiplexor register */
//  { 0x79, 0x01 }, { 0xc8, 0xf0 },
//  { 0x79, 0x0f }, { 0xc8, 0x00 },
//  { 0x79, 0x10 }, { 0xc8, 0x7e },
//  { 0x79, 0x0a }, { 0xc8, 0x80 },
//  { 0x79, 0x0b }, { 0xc8, 0x01 },
//  { 0x79, 0x0c }, { 0xc8, 0x0f },
//  { 0x79, 0x0d }, { 0xc8, 0x20 },
//  { 0x79, 0x09 }, { 0xc8, 0x80 },
//  { 0x79, 0x02 }, { 0xc8, 0xc0 },
//  { 0x79, 0x03 }, { 0xc8, 0x40 },
//  { 0x79, 0x05 }, { 0xc8, 0x30 },
//  { 0x79, 0x26 },
//  { 0xff, 0xff }, /* END MARKER */
//};

#endif

